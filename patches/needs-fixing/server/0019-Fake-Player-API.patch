From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <fishcake007@outlook.com>
Date: Sun, 19 Dec 2021 22:02:03 +0000
Subject: [PATCH] Fake Player API


diff --git a/src/main/java/dev/mrfishcakes/crunchy/player/CraftFakePlayer.java b/src/main/java/dev/mrfishcakes/crunchy/player/CraftFakePlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..68a1dc7a266f52b17dd993d0f56d049b68255c1a
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/player/CraftFakePlayer.java
@@ -0,0 +1,139 @@
+package dev.mrfishcakes.crunchy.player;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import dev.mrfishcakes.crunchy.event.FakePlayerJoinEvent;
+import dev.mrfishcakes.crunchy.event.FakePlayerQuitEvent;
+import net.kyori.adventure.text.Component;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.GameMode;
+import org.bukkit.craftbukkit.CraftServer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+public class CraftFakePlayer implements FakePlayer {
+
+    private final PlayerProfile profile;
+    private final UUID uniqueId;
+    private Component name;
+    private int ping;
+    private GameMode mode;
+    private boolean sentPacket;
+
+    public CraftFakePlayer(@NotNull PlayerProfile profile, @NotNull Component name, int ping, @NotNull GameMode mode) throws IllegalArgumentException {
+        this.profile = profile;
+        if (profile.getId() == null) {
+            throw new IllegalArgumentException("PlayerProfile contains an invalid UUID");
+        }
+        this.uniqueId = profile.getId();
+        this.name = name;
+        this.ping = ping;
+        this.mode = mode;
+    }
+
+    private void sendUpdatePacket(@NotNull ClientboundPlayerInfoPacket.Action action) {
+        if (!isJoined()) return;
+
+        ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(action, this);
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().players) {
+            if (player.getBukkitEntity().canSee(this)) {
+                player.connection.send(packet);
+            }
+        }
+    }
+
+    @Override
+    public void join() {
+        if (isJoined()) return;
+
+        new FakePlayerJoinEvent(this).callEvent();
+        ((CraftServer) Bukkit.getServer()).fakePlayerMap.put(uniqueId, this);
+
+        ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, this);
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().players) {
+            if (player.getBukkitEntity().canSee(this)) {
+                player.connection.send(packet);
+            }
+        }
+    }
+
+    @Override
+    public void quit() {
+        if (!isJoined()) return;
+
+        new FakePlayerQuitEvent(this).callEvent();
+        ((CraftServer) Bukkit.getServer()).fakePlayerMap.remove(uniqueId);
+
+        ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.REMOVE_PLAYER, this);
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().players) {
+            if (player.getBukkitEntity().canSee(this)) {
+                player.connection.send(packet);
+            } else {
+                player.getBukkitEntity().hiddenFakePlayers.remove(uniqueId);
+            }
+        }
+    }
+
+    @Override
+    public void update() {
+        sendUpdatePacket(ClientboundPlayerInfoPacket.Action.UPDATE_LATENCY);
+        sendUpdatePacket(ClientboundPlayerInfoPacket.Action.UPDATE_DISPLAY_NAME);
+        sendUpdatePacket(ClientboundPlayerInfoPacket.Action.UPDATE_GAME_MODE);
+    }
+
+    @Override
+    public @NotNull PlayerProfile getProfile() {
+        return profile;
+    }
+
+    @Override
+    public @NotNull Component getDisplayName() {
+        return name;
+    }
+
+    @Override
+    public int getPing() {
+        return ping;
+    }
+
+    @Override
+    public @NotNull GameMode getGameMode() {
+        return mode;
+    }
+
+    @Override
+    public @Nullable UUID getUniqueId() {
+        return uniqueId;
+    }
+
+    @Override
+    public boolean isJoined() {
+        return ((CraftServer) Bukkit.getServer()).fakePlayerMap.containsKey(uniqueId);
+    }
+
+    @Override
+    public void setPing(int ping, boolean update) {
+        this.ping = ping;
+
+        if (update) sendUpdatePacket(ClientboundPlayerInfoPacket.Action.UPDATE_LATENCY);
+    }
+
+    @Override
+    public void setDisplayName(@NotNull Component name, boolean update) {
+        this.name = name;
+
+        if (update) sendUpdatePacket(ClientboundPlayerInfoPacket.Action.UPDATE_DISPLAY_NAME);
+    }
+
+    @Override
+    public void setGameMode(GameMode mode, boolean update) {
+        this.mode = mode;
+
+        if (update) sendUpdatePacket(ClientboundPlayerInfoPacket.Action.UPDATE_GAME_MODE);
+    }
+
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
index 420cc7ab5f7245f31dd5b333eacf4e306fc6e7c1..9642a25b64a66f7197b3581a2453ae707127de1d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
@@ -17,7 +17,18 @@ import net.minecraft.world.level.GameType;
 public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListener> {
     private final ClientboundPlayerInfoPacket.Action action;
     private final List<ClientboundPlayerInfoPacket.PlayerUpdate> entries;
+    // Crunchy start - Fake Player API
+    public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action action, dev.mrfishcakes.crunchy.player.FakePlayer... fakePlayers) {
+        this.action = action;
+        this.entries = Lists.newArrayListWithCapacity(fakePlayers.length);
 
+        for (dev.mrfishcakes.crunchy.player.FakePlayer fakePlayer : fakePlayers) {
+            entries.add(new ClientboundPlayerInfoPacket.PlayerUpdate(
+                    com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlib(fakePlayer.getProfile()), fakePlayer.getPing(),
+                    GameType.byId(fakePlayer.getGameMode().getValue()), io.papermc.paper.adventure.PaperAdventure.asVanilla(fakePlayer.getDisplayName())));
+        }
+    }
+    // Crunchy end - Fake Player API
     public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action action, ServerPlayer... players) {
         this.action = action;
         this.entries = Lists.newArrayListWithCapacity(players.length);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 042be2cf60a9d01698808d84f2e537a5eb952079..6e4c1fe0e8fca9c15c16968716b84cb97732e84a 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -371,7 +371,13 @@ public abstract class PlayerList {
             // Paper end
         }
         // CraftBukkit end
-
+        // Crunchy start - Fake Player API
+        for (dev.mrfishcakes.crunchy.player.FakePlayer fakePlayer : server.server.fakePlayerMap.values()) { // This looks so wrong...but Java
+            if (player.getBukkitEntity().canSee(fakePlayer)) {
+                player.connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, fakePlayer));
+            }
+        }
+        // Crunchy end - Fake Player API
         // CraftBukkit start - sendAll above replaced with this loop
         ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, player);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a541c6c7727158ab612f1cb48a59f5d5894034e9..d22f9f9605723e3c67281d402b224a40cec6792b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2829,4 +2829,26 @@ public final class CraftServer implements Server {
         org.bukkit.enchantments.Enchantment.registerEnchantment(enchantment);
     }
     // Crunchy end - Custom enchantment API
+    // Crunchy start - Fake Player API
+    public final Map<UUID, dev.mrfishcakes.crunchy.player.FakePlayer> fakePlayerMap = com.google.common.collect.Maps.newHashMap();
+
+    @Override
+    @NotNull
+    public java.util.Optional<dev.mrfishcakes.crunchy.player.FakePlayer> getFakePlayer(@NotNull UUID uniqueId) {
+        return java.util.Optional.ofNullable(fakePlayerMap.get(uniqueId));
+    }
+
+    @Override
+    @NotNull
+    public dev.mrfishcakes.crunchy.player.FakePlayer createFakePlayer(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, int ping, @NotNull GameMode mode,
+                                                               @NotNull net.kyori.adventure.text.Component name) throws IllegalArgumentException {
+        return new dev.mrfishcakes.crunchy.player.CraftFakePlayer(profile, name, ping, mode);
+    }
+
+    @Override
+    @NotNull
+    public Set<dev.mrfishcakes.crunchy.player.FakePlayer> getJoinedFakePlayers() {
+        return Set.copyOf(fakePlayerMap.values());
+    }
+    // Crunchy end - Fake Player API
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index c6cd4a5790384811f3171ce740afb9459f3d6fc0..b795c5a735ab150c10cee90d340472aa4d205c2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2571,6 +2571,67 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return getHandle().connection != null ? getHandle().connection.getClientBrandName() : null;
     }
     // Paper end
+    // Crunchy start - Fake Player API
+    public final Map<UUID, Set<WeakReference<Plugin>>> hiddenFakePlayers = new HashMap<>();
+
+    @Override
+    public Set<dev.mrfishcakes.crunchy.player.FakePlayer> getHiddenFakePlayers() {
+        Set<dev.mrfishcakes.crunchy.player.FakePlayer> retention = new HashSet<>();
+
+        for (UUID uniqueId : hiddenFakePlayers.keySet()) {
+            Bukkit.getFakePlayer(uniqueId).ifPresent(retention::add);
+        }
+
+        return java.util.Collections.unmodifiableSet(retention);
+    }
+
+    @Override
+    public boolean canSee(@NotNull dev.mrfishcakes.crunchy.player.FakePlayer player) {
+        return !hiddenFakePlayers.containsKey(player.getUniqueId());
+    }
+
+    @Override
+    public void hideFakePlayer(@NotNull Plugin plugin, @NotNull dev.mrfishcakes.crunchy.player.FakePlayer player) {
+        if (getHandle().connection == null) return;
+
+        final UUID fakeUniqueId = player.getUniqueId();
+        if (fakeUniqueId.equals(getUniqueId())) return;
+
+        Set<WeakReference<Plugin>> hiding = hiddenFakePlayers.get(fakeUniqueId);
+        if (hiding != null) {
+            hiding.add(getPluginWeakReference(plugin));
+            return;
+        }
+
+        hiding = new HashSet<>();
+        hiding.add(getPluginWeakReference(plugin));
+        hiddenFakePlayers.put(fakeUniqueId, hiding);
+
+        if (((CraftServer) Bukkit.getServer()).fakePlayerMap.containsKey(fakeUniqueId)) {
+            getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.REMOVE_PLAYER, player));
+        }
+    }
+
+    @Override
+    public void showFakePlayer(@NotNull Plugin plugin, @NotNull dev.mrfishcakes.crunchy.player.FakePlayer player) {
+        if (getHandle().connection == null) return;
+
+        final UUID fakeUniqueId = player.getUniqueId();
+        if (fakeUniqueId.equals(getUniqueId())) return;
+
+        Set<WeakReference<Plugin>> hiding = hiddenFakePlayers.get(fakeUniqueId);
+        if (hiding == null) return;
+
+        hiding.remove(getPluginWeakReference(plugin));
+        if (!hiding.isEmpty()) return;
+
+        hiddenFakePlayers.remove(fakeUniqueId);
+
+        if (((CraftServer) Bukkit.getServer()).fakePlayerMap.containsKey(fakeUniqueId)) {
+            getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, player));
+        }
+    }
+    // Crunchy end - Fake Player API
 
     public Player.Spigot spigot()
     {

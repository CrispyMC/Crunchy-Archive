From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <fishcake007@outlook.com>
Date: Tue, 4 Jan 2022 19:55:04 +0000
Subject: [PATCH] Json Configuration

Using the configuration API created by md_5 for BungeeCord, JSON configurations are now available. To use the API for custom JSON files, look on the SpigotMC wiki for more information or look at the JavaPlugin class where it is implemented

diff --git a/build.gradle.kts b/build.gradle.kts
index bcce7e6c3799149027224089e3404b2f4cfe15cd..8ef2afaea3995504d8036507f89663ec6fc9a072 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -46,6 +46,7 @@ dependencies {
     runtimeOnly("com.zaxxer:HikariCP:5.0.1") // Crunchy
     runtimeOnly("com.j256.ormlite:ormlite-jdbc:6.1") // Crunchy
     api("net.kyori:adventure-text-minimessage:4.1.0-SNAPSHOT") // Crunchy
+    api("net.md-5:bungeecord-config:1.16-R0.4") // Crunchy
 
     implementation("org.ow2.asm:asm:9.2")
     implementation("org.ow2.asm:asm-commons:9.2")
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 3940b3ecb53e5eb32599d576a63b1287a4571d5d..7b4f72623e09efccb047879cee17a6ad20967936 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -233,4 +233,28 @@ public interface Plugin extends TabExecutor {
      */
     void registerListener(@NotNull org.bukkit.event.Listener listener);
     // Crunchy end - Easier command/listener registration
+    // Crunchy start - Json Configuration
+    /**
+     * Return the active {@link net.md_5.bungee.config.Configuration} being used
+     *
+     * @return Current JSON config
+     */
+    @NotNull
+    net.md_5.bungee.config.Configuration getJsonConfig();
+
+    /**
+     * Save the current JSON config to the disk
+     */
+    void saveJsonConfig();
+
+    /**
+     * Reload the current stored JSON config from the disk
+     */
+    void reloadJsonConfig();
+
+    /**
+     * Save the default JSON config to the disk
+     */
+    void saveDefaultJsonConfig();
+    // Crunchy end - Json Configuration
 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 00d74cd88a8e0cd3a69c302ee996147cb9f96ba3..a16b44c953c2082dbc8a8984f8cd5f6a1cca865c 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -277,6 +277,7 @@ public abstract class JavaPlugin extends PluginBase {
         this.dataFolder = dataFolder;
         this.classLoader = classLoader;
         this.configFile = new File(dataFolder, "config.yml");
+        this.jsonConfigFile = new File(dataFolder, "config.json"); // Crunchy - Json Configuration
         // Paper start
         if (this.logger == null) {
             this.logger = com.destroystokyo.paper.utils.PaperPluginLogger.getLogger(this.description);
@@ -407,6 +408,56 @@ public abstract class JavaPlugin extends PluginBase {
         getServer().getPluginManager().registerEvents(listener, this);
     }
     // Crunchy end - Easier command/listener registration
+    // Crunchy start - Json Configuration
+    private File jsonConfigFile = null;
+    private net.md_5.bungee.config.Configuration jsonConfig = null;
+
+    /**
+     * Return the active {@link net.md_5.bungee.config.Configuration} being used
+     *
+     * @return Current JSON config
+     */
+    @Override
+    @NotNull
+    public net.md_5.bungee.config.Configuration getJsonConfig() {
+        if (jsonConfig == null) reloadJsonConfig();
+
+        return jsonConfig;
+    }
+
+    /**
+     * Save the current JSON config to the disk
+     */
+    @Override
+    public void saveJsonConfig() {
+        try {
+            net.md_5.bungee.config.ConfigurationProvider.getProvider(net.md_5.bungee.config.JsonConfiguration.class).save(jsonConfig, jsonConfigFile);
+        } catch (IOException ex) {
+            logger.log(Level.SEVERE, "Unable to save " + jsonConfigFile, ex);
+        }
+    }
+
+    /**
+     * Reload the current stored JSON config from the disk
+     */
+    @Override
+    public void reloadJsonConfig() {
+        try {
+            jsonConfig = net.md_5.bungee.config.ConfigurationProvider.getProvider(net.md_5.bungee.config.JsonConfiguration.class).load(jsonConfigFile);
+        } catch (IOException ex) {
+            logger.log(Level.SEVERE, "Unable to reload " + jsonConfigFile, ex);
+        }
+    }
+
+    /**
+     * Save the default JSON config to the disk
+     */
+    @Override
+    public void saveDefaultJsonConfig() {
+        if (!jsonConfigFile.exists())
+            saveResource("config.json", false);
+    }
+    // Crunchy end - Json Configuration
 
     /**
      * This method provides fast access to the plugin that has {@link

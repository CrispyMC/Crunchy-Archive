From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <finlayoxby@outlook.com>
Date: Thu, 2 Sep 2021 16:13:56 +0100
Subject: [PATCH] Crunchy Branding


diff --git a/build.gradle.kts b/build.gradle.kts
index 01798255d45f2a642df00156f11dd2bcd8108079..fa86622bbb2744de2d947fd4f1e08e022a9b1134 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,3 +1,5 @@
+import java.util.Locale
+
 plugins {
     `java-library`
     `maven-publish`
@@ -41,6 +43,8 @@ dependencies {
     apiAndDocs("net.kyori:adventure-text-serializer-plain")
     api("org.apache.logging.log4j:log4j-api:2.17.1")
     api("org.slf4j:slf4j-api:1.8.0-beta4")
+    runtimeOnly("com.zaxxer:HikariCP:5.0.1") // Crunchy
+    runtimeOnly("com.j256.ormlite:ormlite-jdbc:6.1") // Crunchy
 
     implementation("org.ow2.asm:asm:9.2")
     implementation("org.ow2.asm:asm-commons:9.2")
@@ -68,6 +72,7 @@ dependencies {
 
 configure<PublishingExtension> {
     publications.create<MavenPublication>("maven") {
+        artifactId = project.name.toLowerCase(Locale.ENGLISH)
         from(components["java"])
     }
 }
@@ -109,6 +114,8 @@ tasks.withType<Javadoc> {
         "https://jd.adventure.kyori.net/text-serializer-legacy/$adventureVersion/",
         "https://jd.adventure.kyori.net/text-serializer-plain/$adventureVersion/",
         // Paper end
+        "https://javadoc.io/doc/com.zaxxer/HikariCP/latest/index.html", // Crunchy
+        "https://ormlite.com/javadoc/ormlite-core/", // Crunchy
     )
 
     inputs.files(apiAndDocs).ignoreEmptyDirectories().withPropertyName(apiAndDocs.name + "-configuration")
diff --git a/src/main/java/dev/mrfishcakes/crunchy/CrunchyUtil.java b/src/main/java/dev/mrfishcakes/crunchy/CrunchyUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..af4cee5edbf3f826bb5e7803c83fd31cfc37d1e2
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/CrunchyUtil.java
@@ -0,0 +1,32 @@
+package dev.mrfishcakes.crunchy;
+
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.TagResolver;
+import org.bukkit.ChatColor;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Class for managing simple/repetitive methods used within Crunchy
+ *
+ * @author MrFishCakes
+ */
+public final class CrunchyUtil {
+
+    private CrunchyUtil() {
+        throw new UnsupportedOperationException("CrunchyUtil cannot be initiated");
+    }
+
+    public static void sendMessage(@NotNull CommandSender sender, @NotNull String message) {
+        sender.sendMessage(ChatColor.translateAlternateColorCodes('&', message.replaceAll("''", "'")));
+    }
+
+    public static void sendMessage(@NotNull MiniMessage miniMessage, @NotNull CommandSender sender, @NotNull String message) {
+        sender.sendMessage(miniMessage.deserialize(message));
+    }
+
+    public static void sendMessage(@NotNull MiniMessage miniMessage, @NotNull TagResolver resolver, @NotNull CommandSender sender, @NotNull String message) {
+        sender.sendMessage(miniMessage.deserialize(message, resolver));
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/SkullBuilder.java b/src/main/java/dev/mrfishcakes/crunchy/SkullBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..63a7eaf7b63436e5954e94790cc5f31d56f09b1b
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/SkullBuilder.java
@@ -0,0 +1,156 @@
+package dev.mrfishcakes.crunchy;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.destroystokyo.paper.profile.ProfileProperty;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.SkullMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+import java.util.function.Consumer;
+import java.util.logging.Level;
+
+/**
+ * Class for creating skulls easily and applying {@link SkullMeta}
+ *
+ * @author MrFishCales
+ */
+public class SkullBuilder {
+
+    /**
+     * Enum for managing skull types
+     */
+    public enum SkullType {
+
+        CREEPER(Material.CREEPER_HEAD),
+        DRAGON(Material.DRAGON_HEAD),
+        PLAYER(Material.PLAYER_HEAD),
+        SKELETON(Material.SKELETON_SKULL),
+        WITHER_SKELETON(Material.WITHER_SKELETON_SKULL),
+        ZOMBIE(Material.ZOMBIE_HEAD);
+
+        private final Material material;
+
+        SkullType(@NotNull Material material) {
+            this.material = material;
+        }
+
+        /**
+         * Returns the material that is used to make the skull
+         *
+         * @return {@link Material} type for the skull
+         */
+        public Material getMaterial() {
+            return material;
+        }
+
+    }
+
+    private final SkullType skullType;
+    private final ItemStack itemStack;
+    private final SkullMeta skullMeta;
+
+    /**
+     * Create a new instance of the class
+     *
+     * @param skullType {@link SkullType} that should be used when creating the {@link ItemStack}
+     */
+    public SkullBuilder(@NotNull SkullType skullType) {
+        this.skullType = skullType;
+        this.itemStack = new ItemStack(skullType.getMaterial());
+        this.skullMeta = (SkullMeta) itemStack.getItemMeta();
+    }
+
+    /**
+     * Create a default new instance of the class
+     * <p>
+     * This will create a {@link SkullType#PLAYER} by default
+     *
+     * @see Material#PLAYER_HEAD
+     */
+    public SkullBuilder() {
+        this(SkullType.PLAYER);
+    }
+
+    /**
+     * Set the {@link OfflinePlayer} owner of the skull
+     *
+     * @param player {@link OfflinePlayer} to set the value as
+     * @return Updated instance
+     */
+    public SkullBuilder setOfflinePlayer(@NotNull OfflinePlayer player) {
+        if (skullType != SkullType.PLAYER) {
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot assign player value to non-player skull", new IllegalArgumentException(
+                    "Cannot assign player value to a non-player skull"));
+            return this;
+        }
+
+        skullMeta.setOwningPlayer(player);
+
+        return this;
+    }
+
+    /**
+     * Set a custom texture to the skull.
+     * <p>
+     * This allows for more customisation where heads are needed
+     *
+     * @param value     Skin value
+     * @param signature Skin signature
+     * @return Updated instance
+     */
+    public SkullBuilder setCustomTexture(@NotNull String value, @Nullable String signature) {
+        if (skullType != SkullType.PLAYER) {
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot assign player skin value to non-player skull", new IllegalArgumentException(
+                    "Cannot assign player skin value to a non-player skull"));
+            return this;
+        }
+
+        PlayerProfile profile = Bukkit.createProfile(UUID.randomUUID());
+        profile.setProperty(new ProfileProperty("textures", value, signature));
+
+        skullMeta.setPlayerProfile(profile);
+
+        return this;
+    }
+
+    /**
+     * Set a custom texture to the skull.
+     * <p>
+     * This allows for more customisation where heads are needed
+     *
+     * @param value Skin value
+     * @return Updated instance
+     * @see SkullBuilder#setCustomTexture(String, String)
+     */
+    public SkullBuilder setCustomTexture(@NotNull String value) {
+        return setCustomTexture(value, null);
+    }
+
+    /**
+     * Apply custom {@link SkullMeta} to the item
+     *
+     * @param consumer {@link SkullMeta} to apply
+     * @return Updated instance
+     */
+    public SkullBuilder applyItemMeta(@NotNull Consumer<SkullMeta> consumer) {
+        consumer.accept(skullMeta);
+
+        return this;
+    }
+
+    /**
+     * Get the final {@link ItemStack} for the skull
+     *
+     * @return Skull as item
+     */
+    public ItemStack build() {
+        itemStack.setItemMeta(skullMeta);
+        return itemStack;
+    }
+
+}

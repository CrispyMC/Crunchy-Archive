From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <fishcake007@outlook.com>
Date: Sun, 19 Dec 2021 21:16:07 +0000
Subject: [PATCH] Fake Player API


diff --git a/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerEvent.java b/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..27e83d8737fa47f129235d2475bc9c65103cc38b
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerEvent.java
@@ -0,0 +1,20 @@
+package dev.mrfishcakes.crunchy.event;
+
+import dev.mrfishcakes.crunchy.player.FakePlayer;
+import org.bukkit.event.Event;
+import org.jetbrains.annotations.NotNull;
+
+public abstract class FakePlayerEvent extends Event {
+
+    protected FakePlayer player;
+
+    public FakePlayerEvent(@NotNull FakePlayer who) {
+        this.player = who;
+    }
+
+    @NotNull
+    public FakePlayer getPlayer() {
+        return player;
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerJoinEvent.java b/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerJoinEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..818d4adbbb6bab6cd5ba7daf1a5ae2e04e400369
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerJoinEvent.java
@@ -0,0 +1,25 @@
+package dev.mrfishcakes.crunchy.event;
+
+import dev.mrfishcakes.crunchy.player.FakePlayer;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class FakePlayerJoinEvent extends FakePlayerEvent {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    public FakePlayerJoinEvent(@NotNull FakePlayer who) {
+        super(who);
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return HANDLERS;
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerQuitEvent.java b/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerQuitEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..7abc7f291b35bce96faf83ef4dd51eac850d7993
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/event/FakePlayerQuitEvent.java
@@ -0,0 +1,25 @@
+package dev.mrfishcakes.crunchy.event;
+
+import dev.mrfishcakes.crunchy.player.FakePlayer;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class FakePlayerQuitEvent extends FakePlayerEvent {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    public FakePlayerQuitEvent(@NotNull FakePlayer who) {
+        super(who);
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return HANDLERS;
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/player/FakePlayer.java b/src/main/java/dev/mrfishcakes/crunchy/player/FakePlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..4ffbed7957d11e1c1e03e8b3aa2734fdeb03bf19
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/player/FakePlayer.java
@@ -0,0 +1,189 @@
+package dev.mrfishcakes.crunchy.player;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+/**
+ * Interface for interacting with a {@link FakePlayer} at an API level
+ *
+ * @author MrFishCakes
+ */
+public interface FakePlayer {
+
+    /**
+     * Enum to represent different ping bar levels
+     */
+    enum PingBar {
+
+        ONE(1000),
+        TWO(999),
+        THREE(599),
+        FOUR(299),
+        FIVE(149),
+        NONE(-1);
+
+        private final int ping;
+
+        PingBar(int ping) {
+            this.ping = ping;
+        }
+
+        public int asInteger() {
+            return ping;
+        }
+
+    }
+
+    /**
+     * Have the FakePlayer join the server
+     */
+    void join();
+
+    /**
+     * Have the FakePlayer quit the server
+     */
+    void quit();
+
+    /**
+     * Forcefully update the tab settings for the FakePlayer
+     */
+    void update();
+
+    /**
+     * Get the {@link PlayerProfile} of the FakePlayer
+     *
+     * @return The profile being used
+     */
+    @NotNull
+    PlayerProfile getProfile();
+
+    /**
+     * Get the display name of the FakePlayer
+     *
+     * @return Display name
+     * @see Component
+     */
+    @NotNull
+    Component getDisplayName();
+
+    /**
+     * Get the ping of the FakePlayer
+     *
+     * @return Current ping
+     * @deprecated Use {@link FakePlayer#getPingBar()}
+     */
+    @Deprecated
+    default int getPing() {
+        return getPingBar().asInteger();
+    }
+
+    /**
+     * Get the {@link PingBar} of the FakePlayer
+     *
+     * @return Ping bar
+     */
+    PingBar getPingBar();
+
+    /**
+     * Get the current {@link GameMode} of the FakePlayer
+     *
+     * @return Current gamemode
+     */
+    @NotNull
+    GameMode getGameMode();
+
+    /**
+     * Get the {@link UUID} of the FakePlayer
+     *
+     * @return UUID
+     */
+    @Nullable
+    UUID getUniqueId();
+
+    /**
+     * Check if the FakePlayer is joined to the server
+     *
+     * @return True if joined, false otherwise
+     */
+    boolean isJoined();
+
+    /**
+     * Set the ping of the FakePlayer
+     *
+     * @param ping Ping to set
+     * @deprecated Use {@link PingBar} enum/methods instead
+     */
+    @Deprecated
+    default void setPing(int ping) {
+        setPing(ping, true);
+    }
+
+    /**
+     * Set the ping of the FakePlayer
+     *
+     * @param ping   Ping to set
+     * @param update Update the tablist
+     * @deprecated Use {@link PingBar} enum/methods instead
+     */
+    @Deprecated
+    void setPing(int ping, boolean update);
+
+    /**
+     * Set the ping of the FakePlayer
+     *
+     * @param bar {@link PingBar} value
+     */
+    default void setPing(@NotNull PingBar bar) {
+        setPing(bar, true);
+    }
+
+    /**
+     * Set the ping of the FakePlayer
+     *
+     * @param bar {@link PingBar} value
+     * @param update Update the tablist
+     */
+    void setPing(@NotNull PingBar bar, boolean update);
+
+    /**
+     * Set the display name of the FakePlayer
+     *
+     * @param name Name to set
+     * @see Component
+     */
+    default void setDisplayName(@NotNull Component name) {
+        setDisplayName(name, true);
+    }
+
+    /**
+     * Set the display name of the FakePlayer
+     *
+     * @param name   Name to set
+     * @param update Update the tablist
+     * @see Component
+     */
+    void setDisplayName(@NotNull Component name, boolean update);
+
+    /**
+     * Set the {@link GameMode} of the FakePlayer
+     *
+     * @param mode GameMode to set
+     */
+    default void setGameMode(@NotNull GameMode mode) {
+        setGameMode(mode, true);
+    }
+
+    /**
+     * Set the {@link GameMode} of the FakePlayer
+     *
+     * @param mode   GameMode to set
+     * @param update Update the tablist
+     */
+    void setGameMode(GameMode mode, boolean update);
+
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index ce3e0d3bc725b9396fb98a5cf01d789ded9889e9..4e8bd1e848931d381d1b19ef6a630f0f1031d8f6 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2218,6 +2218,62 @@ public final class Bukkit {
         server.registerEnchantment(enchantment);
     }
     // Crunchy end - Custom enchantment API
+    // Crunchy start - Fake Player API
+    /**
+     * Check/get if a {@link dev.mrfishcakes.crunchy.player.FakePlayer} exists
+     *
+     * @param uniqueId {@link UUID} of the FakePlayer
+     * @return {@link java.util.Optional} with a FakePlayer (if found) or empty (if not found)
+     */
+    @NotNull
+    public static java.util.Optional<dev.mrfishcakes.crunchy.player.FakePlayer> getFakePlayer(@NotNull UUID uniqueId) {
+        return server.getFakePlayer(uniqueId);
+    }
+
+    /**
+     * Create a new {@link dev.mrfishcakes.crunchy.player.FakePlayer}. The {@link com.destroystokyo.paper.profile.PlayerProfile PlayerProfile} must contain a
+     * username else the server will error when a real player connects!
+     *
+     * @param profile {@link com.destroystokyo.paper.profile.PlayerProfile} to inherit features from
+     * @param ping Ping for the tablist
+     * @param mode {@link GameMode} for the FakePlayer
+     * @param name Name for the FakePlayer
+     * @return New FakePlayer
+     * @deprecated Use {@link Bukkit#createFakePlayer(com.destroystokyo.paper.profile.PlayerProfile, dev.mrfishcakes.crunchy.player.FakePlayer.PingBar, GameMode, net.kyori.adventure.text.Component)}
+     */
+    @Deprecated
+    @NotNull
+    public static dev.mrfishcakes.crunchy.player.FakePlayer createFakePlayer(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, int ping, @NotNull GameMode mode,
+                                                                             @NotNull net.kyori.adventure.text.Component name) {
+        return server.createFakePlayer(profile, ping, mode, name);
+    }
+
+    /**
+     * Create a new {@link dev.mrfishcakes.crunchy.player.FakePlayer}. The {@link com.destroystokyo.paper.profile.PlayerProfile PlayerProfile} must contain a
+     * username else the server will error when a real player connects!
+     *
+     * @param profile {@link com.destroystokyo.paper.profile.PlayerProfile} to inherit features from
+     * @param ping Ping for the tablist
+     * @param mode {@link GameMode} for the FakePlayer
+     * @param name Name for the FakePlayer
+     * @return New FakePlayer
+     */
+    @NotNull
+    dev.mrfishcakes.crunchy.player.FakePlayer createFakePlayer(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, @NotNull dev.mrfishcakes.crunchy.player.FakePlayer.PingBar ping, @NotNull GameMode mode,
+                                                               @NotNull net.kyori.adventure.text.Component name) {
+        return server.createFakePlayer(profile, ping, mode, name);
+    }
+
+    /**
+     * Get a {@link Set} containing all FakePlayers "joined"
+     *
+     * @return Unmodifiable set with all FakePlayers
+     */
+    @NotNull
+    public static java.util.Set<dev.mrfishcakes.crunchy.player.FakePlayer> getJoinedFakePlayers() {
+        return server.getJoinedFakePlayers();
+    }
+    // Crunch end - Fake Player API
 
     @NotNull
     public static Server.Spigot spigot() {
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 5de1434f3a738f04f2267eb01034916fa62e905e..cf3adc889af160ea3cf06f3e8230d232f055b8eb 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -1932,4 +1932,54 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     void registerEnchantment(@NotNull final dev.mrfishcakes.crunchy.enchantment.CustomEnchantment enchantment);
     // Crunchy end - Custom enchantment API
+    // Crunchy start - Fake Player API
+    /**
+     * Check/get if a {@link dev.mrfishcakes.crunchy.player.FakePlayer} exists
+     *
+     * @param uniqueId {@link UUID} of the FakePlayer
+     * @return {@link java.util.Optional} with a FakePlayer (if found) or empty (if not found)
+     */
+    @NotNull
+    java.util.Optional<dev.mrfishcakes.crunchy.player.FakePlayer> getFakePlayer(@NotNull UUID uniqueId);
+
+    /**
+     * Create a new {@link dev.mrfishcakes.crunchy.player.FakePlayer}. The {@link com.destroystokyo.paper.profile.PlayerProfile PlayerProfile} must contain a
+     * username else the server will error when a real player connects!
+     *
+     * @param profile {@link com.destroystokyo.paper.profile.PlayerProfile} to inherit features from
+     * @param ping Ping for the tablist
+     * @param mode {@link GameMode} for the FakePlayer
+     * @param name Name for the FakePlayer
+     * @return New FakePlayer
+     * @throws IllegalArgumentException Incase profile UUID is null
+     * @deprecated Use {@link Server#createFakePlayer(com.destroystokyo.paper.profile.PlayerProfile, dev.mrfishcakes.crunchy.player.FakePlayer.PingBar, GameMode, net.kyori.adventure.text.Component)}
+     */
+    @Deprecated
+    @NotNull
+    dev.mrfishcakes.crunchy.player.FakePlayer createFakePlayer(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, int ping, @NotNull GameMode mode,
+                                                               @NotNull net.kyori.adventure.text.Component name) throws IllegalArgumentException;
+
+    /**
+     * Create a new {@link dev.mrfishcakes.crunchy.player.FakePlayer}. The {@link com.destroystokyo.paper.profile.PlayerProfile PlayerProfile} must contain a
+     * username else the server will error when a real player connects!
+     *
+     * @param profile {@link com.destroystokyo.paper.profile.PlayerProfile} to inherit features from
+     * @param ping Ping for the tablist
+     * @param mode {@link GameMode} for the FakePlayer
+     * @param name Name for the FakePlayer
+     * @return New FakePlayer
+     * @throws IllegalArgumentException Incase profile UUID is null
+     */
+    @NotNull
+    dev.mrfishcakes.crunchy.player.FakePlayer createFakePlayer(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, @NotNull dev.mrfishcakes.crunchy.player.FakePlayer.PingBar ping, @NotNull GameMode mode,
+                                                               @NotNull net.kyori.adventure.text.Component name) throws IllegalArgumentException;
+
+    /**
+     * Get a {@link Set} containing all FakePlayers "joined"
+     *
+     * @return Unmodifiable set with all FakePlayers
+     */
+    @NotNull
+    Set<dev.mrfishcakes.crunchy.player.FakePlayer> getJoinedFakePlayers();
+    // Crunchy end - Fake Player API
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 5e4a9ce5f899624255e806152c59f60664bcf701..fdf1302865de63d3cf60ec53607af8cd17b06081 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -2603,4 +2603,38 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     @Override
     Spigot spigot();
     // Spigot end
+    // Crunchy start - Fake Player API
+    /**
+     * Get all FakePlayers that are currently hidden from this player
+     *
+     * @return Unmodifiable {@link java.util.Set} containing all hidden FakePlayers
+     * @see dev.mrfishcakes.crunchy.player.FakePlayer
+     */
+    @NotNull
+    java.util.Set<dev.mrfishcakes.crunchy.player.FakePlayer> getHiddenFakePlayers();
+
+    /**
+     * Check if the player can see a fake player
+     *
+     * @param player {@link dev.mrfishcakes.crunchy.player.FakePlayer} to check
+     * @return True if they can see
+     */
+    boolean canSee(@NotNull dev.mrfishcakes.crunchy.player.FakePlayer player);
+
+    /**
+     * Hide the chosen {@link dev.mrfishcakes.crunchy.player.FakePlayer} from this player
+     *
+     * @param plugin Plugin calling the change
+     * @param player FakePlayer to hide
+     */
+    void hideFakePlayer(@NotNull Plugin plugin, @NotNull dev.mrfishcakes.crunchy.player.FakePlayer player);
+
+    /**
+     * Show the chosen {@link dev.mrfishcakes.crunchy.player.FakePlayer} to this player
+     *
+     * @param plugin Plugin calling the change
+     * @param player FakePlayer to show
+     */
+    void showFakePlayer(@NotNull Plugin plugin, @NotNull dev.mrfishcakes.crunchy.player.FakePlayer player);
+    // Crunchy end - Fake Player API
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <finlayoxby@outlook.com>
Date: Mon, 18 Oct 2021 19:06:04 +0100
Subject: [PATCH] Smelt Raw Ore Blocks


diff --git a/src/main/java/dev/mrfishcakes/crunchy/commands/CrunchyCommand.java b/src/main/java/dev/mrfishcakes/crunchy/commands/CrunchyCommand.java
index 30e6da894a7d861538cee9816e20bbea747efe51..13db42d3a9930f0cc6918209f7ca446e8ec2def0 100644
--- a/src/main/java/dev/mrfishcakes/crunchy/commands/CrunchyCommand.java
+++ b/src/main/java/dev/mrfishcakes/crunchy/commands/CrunchyCommand.java
@@ -2,6 +2,7 @@ package dev.mrfishcakes.crunchy.commands;
 
 import dev.mrfishcakes.crunchy.CrunchyUtil;
 import dev.mrfishcakes.crunchy.config.CrunchyConfig;
+import dev.mrfishcakes.crunchy.recipe.CrunchyRecipeManager;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import org.bukkit.ChatColor;
@@ -75,6 +76,7 @@ public class CrunchyCommand extends Command {
         MinecraftServer console = MinecraftServer.getServer();
 
         CrunchyConfig.init((File) console.options.valueOf("crunchy-settings"));
+        CrunchyRecipeManager.instance().reloadRecipes();
         for (ServerLevel level : console.getAllLevels()) {
             level.crunchyConfig.init();
         }
diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
index 30030da3b5b633b086cb86eef95921cf898d3b14..de9f016c043c7bd7a7e719cc64b0bbea9de4c53b 100644
--- a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
@@ -203,4 +203,15 @@ public final class CrunchyConfig {
         stopCommandSuccess = getString("commands.stop.success", "<green>The stop has been successfully scheduled!");
     }
 
+    // Smelt Raw Blocks
+    public static boolean smeltRawCopperBlock;
+    public static boolean smeltRawGoldBlock;
+    public static boolean smeltRawIronBlock;
+
+    private static void smeltRawBlocks() {
+        smeltRawCopperBlock = getBoolean("recipes.smelt-raw-copper-block", true);
+        smeltRawGoldBlock = getBoolean("recipes.smelt-raw-gold-block", true);
+        smeltRawIronBlock = getBoolean("recipes.smelt-raw-iron-block", true);
+    }
+
 }
diff --git a/src/main/java/dev/mrfishcakes/crunchy/recipe/CrunchyRecipeManager.java b/src/main/java/dev/mrfishcakes/crunchy/recipe/CrunchyRecipeManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..0696d43bfeba7d928b46bff9fb24f0dc9e33a932
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/recipe/CrunchyRecipeManager.java
@@ -0,0 +1,97 @@
+package dev.mrfishcakes.crunchy.recipe;
+
+import dev.mrfishcakes.crunchy.config.CrunchyConfig;
+import dev.mrfishcakes.crunchy.recipe.smeltable.RawCopperBlock;
+import dev.mrfishcakes.crunchy.recipe.smeltable.RawGoldBlock;
+import dev.mrfishcakes.crunchy.recipe.smeltable.RawIronBlock;
+import org.bukkit.Bukkit;
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.Recipe;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.HashSet;
+import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Future;
+import java.util.concurrent.FutureTask;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.logging.Level;
+
+public final class CrunchyRecipeManager {
+
+    private static final AtomicBoolean INITIATED = new AtomicBoolean(false);
+    private static CrunchyRecipeManager instance;
+
+    public static CrunchyRecipeManager instance() {
+        return instance != null ? instance : new CrunchyRecipeManager();
+    }
+
+    private Set<NamespacedKey> keys;
+
+    private CrunchyRecipeManager() {
+        if (!INITIATED.compareAndSet(false, true)) return;
+
+        instance = this;
+        keys = new HashSet<>();
+
+        if (CrunchyConfig.smeltRawCopperBlock) {
+            registerRecipe(RawCopperBlock.BLASTING, new RawCopperBlock.BlastFurnace());
+            registerRecipe(RawCopperBlock.FURNACE, new RawCopperBlock.Furnace());
+        }
+
+        if (CrunchyConfig.smeltRawGoldBlock) {
+            registerRecipe(RawGoldBlock.BLASTING, new RawGoldBlock.BlastFurnace());
+            registerRecipe(RawGoldBlock.FURNACE, new RawGoldBlock.Furnace());
+        }
+
+        if (CrunchyConfig.smeltRawIronBlock) {
+            registerRecipe(RawIronBlock.BLASTING, new RawIronBlock.BlastFurnace());
+            registerRecipe(RawIronBlock.FURNACE, new RawIronBlock.Furnace());
+        }
+    }
+
+    public void registerRecipe(@NotNull NamespacedKey key, @NotNull Recipe recipe) {
+        keys.add(key);
+
+        if (!Bukkit.addRecipe(recipe)) {
+            Bukkit.getLogger().log(Level.SEVERE, String.format("Unable to register the recipe '%s'", key.getKey()));
+            keys.remove(key);
+        }
+    }
+
+    public void unregisterRecipe(@NotNull NamespacedKey key) {
+        keys.remove(key);
+
+        if (!Bukkit.removeRecipe(key)) {
+            Bukkit.getLogger().log(Level.SEVERE, String.format("Unable to unregister the recipe '%s'", key.getKey()));
+            keys.add(key);
+        }
+    }
+
+    public void reloadRecipes() {
+        CompletableFuture.runAsync(() -> keys.forEach(this::unregisterRecipe)).whenComplete((v, t) -> {
+            if (t != null) {
+                Bukkit.getLogger().log(Level.SEVERE, t.getMessage(), t);
+                return;
+            } else {
+                keys.clear();
+            }
+
+            if (CrunchyConfig.smeltRawCopperBlock) {
+                registerRecipe(RawCopperBlock.BLASTING, new RawCopperBlock.BlastFurnace());
+                registerRecipe(RawCopperBlock.FURNACE, new RawCopperBlock.Furnace());
+            }
+
+            if (CrunchyConfig.smeltRawGoldBlock) {
+                registerRecipe(RawGoldBlock.BLASTING, new RawGoldBlock.BlastFurnace());
+                registerRecipe(RawGoldBlock.FURNACE, new RawGoldBlock.Furnace());
+            }
+
+            if (CrunchyConfig.smeltRawIronBlock) {
+                registerRecipe(RawIronBlock.BLASTING, new RawIronBlock.BlastFurnace());
+                registerRecipe(RawIronBlock.FURNACE, new RawIronBlock.Furnace());
+            }
+        });
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawCopperBlock.java b/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawCopperBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..03f6e4cb6d8275c13e552a26e87ca3e706a8a3c7
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawCopperBlock.java
@@ -0,0 +1,34 @@
+package dev.mrfishcakes.crunchy.recipe.smeltable;
+
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.BlastingRecipe;
+import org.bukkit.inventory.FurnaceRecipe;
+import org.bukkit.inventory.ItemStack;
+
+public class RawCopperBlock {
+
+    public static final NamespacedKey BLASTING = NamespacedKey.crunchy("raw_copper_block_blast_furnace");
+    public static final NamespacedKey FURNACE = NamespacedKey.crunchy("raw_copper_block_furnace");
+
+    private static final ItemStack RESULT = new ItemStack(Material.COPPER_BLOCK);
+    private static final Material MATERIAL = Material.RAW_COPPER_BLOCK;
+    private static final float EXPERIENCE = 6.3F;
+
+    public static final class BlastFurnace extends BlastingRecipe {
+
+        public BlastFurnace() {
+            super(BLASTING, RESULT, MATERIAL, EXPERIENCE, 500);
+        }
+
+    }
+
+    public static final class Furnace extends FurnaceRecipe {
+
+        public Furnace() {
+            super(FURNACE, RESULT, MATERIAL, EXPERIENCE, 800);
+        }
+
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawGoldBlock.java b/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawGoldBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..f32af8397c5063b8679e0af75f7428a58bd5a667
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawGoldBlock.java
@@ -0,0 +1,34 @@
+package dev.mrfishcakes.crunchy.recipe.smeltable;
+
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.BlastingRecipe;
+import org.bukkit.inventory.FurnaceRecipe;
+import org.bukkit.inventory.ItemStack;
+
+public class RawGoldBlock {
+
+    public static final NamespacedKey BLASTING = NamespacedKey.crunchy("raw_gold_block_blast_furnace");
+    public static final NamespacedKey FURNACE = NamespacedKey.crunchy("raw_gold_block_furnace");
+
+    private static final ItemStack RESULT = new ItemStack(Material.GOLD_BLOCK);
+    private static final Material MATERIAL = Material.RAW_GOLD_BLOCK;
+    private static final float EXPERIENCE = 9.0F;
+
+    public static final class BlastFurnace extends BlastingRecipe {
+
+        public BlastFurnace() {
+            super(BLASTING, RESULT, MATERIAL, EXPERIENCE, 500);
+        }
+
+    }
+
+    public static final class Furnace extends FurnaceRecipe {
+
+        public Furnace() {
+            super(FURNACE, RESULT, MATERIAL, EXPERIENCE, 800);
+        }
+
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawIronBlock.java b/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawIronBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..1fa8021cdea3917bd6544182da18d9b2dddd351f
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/recipe/smeltable/RawIronBlock.java
@@ -0,0 +1,34 @@
+package dev.mrfishcakes.crunchy.recipe.smeltable;
+
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.BlastingRecipe;
+import org.bukkit.inventory.FurnaceRecipe;
+import org.bukkit.inventory.ItemStack;
+
+public class RawIronBlock {
+
+    public static final NamespacedKey BLASTING = NamespacedKey.crunchy("raw_iron_block_blast_furnace");
+    public static final NamespacedKey FURNACE = NamespacedKey.crunchy("raw_iron_block_furnace");
+
+    private static final ItemStack RESULT = new ItemStack(Material.IRON_BLOCK);
+    private static final Material MATERIAL = Material.RAW_IRON_BLOCK;
+    private static final float EXPERIENCE = 6.3F;
+
+    public static final class BlastFurnace extends BlastingRecipe {
+
+        public BlastFurnace() {
+            super(BLASTING, RESULT, MATERIAL, EXPERIENCE, 500);
+        }
+
+    }
+
+    public static final class Furnace extends FurnaceRecipe {
+
+        public Furnace() {
+            super(FURNACE, RESULT, MATERIAL, EXPERIENCE, 800);
+        }
+
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4cbb1d293163c64c7e349c4712a5047e18271c21..6b1cabc2a92ad13edd6461c055d51e8fa466645b 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1233,7 +1233,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 String doneTime = String.format(java.util.Locale.ROOT, "%.3fs", (double) (Util.getNanos() - serverStartTime) / 1.0E9D);
                 LOGGER.info("Done ({})! For help, type \"help\"", doneTime);
                 // Paper end
-
+                dev.mrfishcakes.crunchy.recipe.CrunchyRecipeManager.instance(); // Crunchy - Smelt raw ore blocks
                 org.spigotmc.WatchdogThread.tick(); // Paper
                 org.spigotmc.WatchdogThread.hasStarted = true; // Paper
                 Arrays.fill( recentTps, 20 );
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 81f2e402b6565b6fc32da27d8afe82f0b596ee8c..dfaaf03818340356c56a1360deb52a25d7c9965f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -4,7 +4,6 @@ import com.google.common.base.Charsets;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
@@ -926,6 +925,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         dev.mrfishcakes.crunchy.config.CrunchyConfig.init((File) console.options.valueOf("crunchy-settings")); // Crunchy
+        dev.mrfishcakes.crunchy.recipe.CrunchyRecipeManager.instance().reloadRecipes(); // Crunchy - Smelt raw ore blocks
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))

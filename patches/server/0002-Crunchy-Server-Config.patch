From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <finlayoxby@outlook.com>
Date: Thu, 12 Aug 2021 16:01:20 +0100
Subject: [PATCH] Crunchy Server Config


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index cfe293881f68c8db337c3a48948362bb7b3e3522..5fdaead8f09cad96e04468655f2d9321b5960492 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -228,7 +228,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
+            pair("crunchy", mapAsJSON(Bukkit.spigot().getCrunchyConfig(), null)) // Crunchy - Server config
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..1db4c6b7228bc5ed4edecda7c50291092f4e151d
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
@@ -0,0 +1,143 @@
+package dev.mrfishcakes.crunchy.config;
+
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+
+public final class CrunchyConfig {
+
+    private static final String HEADER = """
+            Configuration file for Crunchy.
+            
+            More will be added to this file in future updates and (hopefully) each setting
+            will be documented on the wiki. Double check what each option does before changing
+            it as you don't want to break anything :)""";
+    private static File configFile;
+    private static Map<String, Command> commands;
+
+    public static YamlConfiguration config;
+
+    static int version = 1;
+    static boolean verbose = true;
+
+    public static boolean verbose() {
+        return verbose;
+    }
+
+    public static void init(@NotNull File file) {
+        configFile = file;
+        commands = new HashMap<>();
+
+        if (!configFile.exists()) {
+            try {
+                configFile.createNewFile();
+            } catch (Exception ex) {
+                log(Level.SEVERE, "Failure when creating 'crunchy.yml'", ex);
+            }
+        }
+
+        config = new YamlConfiguration();
+
+        try {
+            config.load(configFile);
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load 'crunchy.yml' to do syntax errors", ex);
+            throw Throwables.propagate(ex);
+        } catch (Exception ex) {
+            log(Level.SEVERE, "Failure loading 'crunchy.yml'", ex);
+            throw Throwables.propagate(ex);
+        }
+
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        verbose = getBoolean("verbose", true);
+        version = getInt("current-version", 1);
+        set("current-version", 1);
+
+        readConfig(CrunchyConfig.class, null);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(),
+                    "Crunchy", entry.getValue());
+        }
+    }
+
+    static void readConfig(@NotNull Class<?> clazz, @Nullable Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (Exception ex) {
+                        log(Level.SEVERE, "Failure invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(configFile);
+        } catch (Exception ex) {
+            log(Level.SEVERE, "Failure when saving 'crunchy.yml'", ex);
+        }
+    }
+
+    private static void set(String path, Object value) {
+        config.addDefault(path, value);
+        config.set(path, value);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static long getLong(String path, long def) {
+        config.addDefault(path, def);
+        return config.getLong(path, config.getLong(path));
+    }
+
+    protected static void log(String message) {
+        if (verbose) log(Level.INFO, message, null);
+    }
+
+    protected static void log(@NotNull Level level, @NotNull String message,
+                              @Nullable Throwable throwable) {
+        if (throwable != null)
+            Bukkit.getLogger().log(level, message, throwable);
+        else
+            Bukkit.getLogger().log(level, message);
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..514d7fa01bbb21910bc6ed28d093dc019288c189
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java
@@ -0,0 +1,70 @@
+package dev.mrfishcakes.crunchy.config;
+
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+import org.jetbrains.annotations.NotNull;
+
+import static dev.mrfishcakes.crunchy.config.CrunchyConfig.log;
+
+public final class CrunchyWorldConfig {
+
+    private final String levelName;
+    private final String defaultPath;
+    private final String namedPath;
+
+    public CrunchyWorldConfig(@NotNull String levelName) {
+        this.levelName = levelName;
+        this.defaultPath = "world-settings.default.";
+        this.namedPath = "world-settings." + levelName + ".";
+
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + levelName + "] --------");
+        CrunchyConfig.readConfig(CrunchyWorldConfig.class, this);
+    }
+
+    private void set(String path, Object value) {
+        CrunchyConfig.config.addDefault(defaultPath + path, value);
+        CrunchyConfig.config.set(defaultPath + path, value);
+
+        if (CrunchyConfig.config.get(namedPath + path) != null) {
+            CrunchyConfig.config.addDefault(namedPath + path, value);
+            CrunchyConfig.config.set(namedPath + path, value);
+        }
+    }
+
+    private ConfigurationSection getSection(String path) {
+        ConfigurationSection section = CrunchyConfig.config.getConfigurationSection(namedPath + path);
+
+        return section != null ? section : CrunchyConfig.config.getConfigurationSection(defaultPath + path);
+    }
+
+    private String getString(String path, String def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getString(namedPath + path, CrunchyConfig.config.getString(defaultPath + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getBoolean(namedPath + path, CrunchyConfig.config.getBoolean(defaultPath + path));
+    }
+
+    private int getInt(String path, int def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getInt(namedPath + path, CrunchyConfig.config.getInt(defaultPath + path));
+    }
+
+    private double getDouble(String path, double def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getDouble(namedPath + path, CrunchyConfig.config.getDouble(defaultPath + path));
+    }
+
+    private long getString(String path, long def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getLong(namedPath + path, CrunchyConfig.config.getLong(defaultPath + path));
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 7b6c547e71230fbb3733f99a4597b3f5b51547b8..90c8606bf9556e686bcb1188e76943e729a73640 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -224,6 +224,16 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // load mappings for stacktrace deobf and etc.
         // Paper end
 
+        // Crunchy start - Server config
+        try {
+            dev.mrfishcakes.crunchy.config.CrunchyConfig.init((java.io.File) options.valueOf("crunchy-settings"));
+        } catch (Exception ex) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", ex);
+            return false;
+        }
+        dev.mrfishcakes.crunchy.config.CrunchyConfig.registerCommands();
+        // Crunchy end - Server config
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index a7485746417e0dddb392c89a5a1d467c0bc83fbe..61b6d2ffb2769b4401875a571d10bb94d016fa53 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -166,6 +166,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
+    public final dev.mrfishcakes.crunchy.config.CrunchyWorldConfig crunchyConfig; // Crunchy - Server config
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
@@ -206,6 +207,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, final DimensionType dimensionmanager, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.concurrent.Executor executor) { // Paper - Anti-Xray - Pass executor
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
+        this.crunchyConfig = new dev.mrfishcakes.crunchy.config.CrunchyWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Crunchy - Server config
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
         this.ticksPerAnimalSpawns = this.getCraftServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 6f347781ff4390e717ea2ca66ec81386818b4967..a66640bac198486a9c482ea6c19b0d4cabda2d8d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -892,6 +892,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        dev.mrfishcakes.crunchy.config.CrunchyConfig.init((java.io.File) console.options.valueOf("crunchy-settings")); // Crunchy - Server config
         for (ServerLevel world : this.console.getAllLevels()) {
             world.serverLevelData.setDifficulty(config.difficulty);
             world.setSpawnSettings(config.spawnMonsters, config.spawnAnimals);
@@ -926,6 +927,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
+            world.crunchyConfig.init(); // Crunchy - Server config
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2512,6 +2514,13 @@ public final class CraftServer implements Server {
             return com.destroystokyo.paper.PaperConfig.config;
         }
 
+        // Crunchy start - Server config
+        @Override
+        public YamlConfiguration getCrunchyConfig() {
+            return dev.mrfishcakes.crunchy.config.CrunchyConfig.config;
+        }
+        // Crunchy end - Server config
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 22e9dd17f62103c5061435099ce96a3d70d54808..5164e02b9bc9220cc856bc09fbd1f5ca7d76f58e 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -147,6 +147,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Paper end
 
+                // Crunchy start - Server config
+                acceptsAll(asList("crunchy", "crunchy-settings"), "File for crunchy settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("crunchy.yml"))
+                        .describedAs("Yml file");
+                // Crunchy end - Server config
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()

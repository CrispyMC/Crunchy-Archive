From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <finlayoxby@outlook.com>
Date: Thu, 12 Aug 2021 16:01:20 +0100
Subject: [PATCH] Crunchy Server Config


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index b5728243f01aa6ea75cb42af453fd9348a5f438b..5bee1ad7e95e0aff1866c0a3318eb83ba73d9df7 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -229,7 +229,8 @@ public class TimingsExport extends Thread {
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Tuinity - add config to timings report
-            pair("tuinity", mapAsJSON(Bukkit.spigot().getTuinityConfig(), null)) // Tuinity - add config to timings report
+            pair("tuinity", mapAsJSON(Bukkit.spigot().getTuinityConfig(), null)), // Tuinity - add config to timings report
+            pair("crunchy", mapAsJSON(Bukkit.spigot().getCrunchyConfig(), null)) // Crunchy - Server config
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..1db4c6b7228bc5ed4edecda7c50291092f4e151d
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
@@ -0,0 +1,143 @@
+package dev.mrfishcakes.crunchy.config;
+
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+
+public final class CrunchyConfig {
+
+    private static final String HEADER = """
+            Configuration file for Crunchy.
+            
+            More will be added to this file in future updates and (hopefully) each setting
+            will be documented on the wiki. Double check what each option does before changing
+            it as you don't want to break anything :)""";
+    private static File configFile;
+    private static Map<String, Command> commands;
+
+    public static YamlConfiguration config;
+
+    static int version = 1;
+    static boolean verbose = true;
+
+    public static boolean verbose() {
+        return verbose;
+    }
+
+    public static void init(@NotNull File file) {
+        configFile = file;
+        commands = new HashMap<>();
+
+        if (!configFile.exists()) {
+            try {
+                configFile.createNewFile();
+            } catch (Exception ex) {
+                log(Level.SEVERE, "Failure when creating 'crunchy.yml'", ex);
+            }
+        }
+
+        config = new YamlConfiguration();
+
+        try {
+            config.load(configFile);
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load 'crunchy.yml' to do syntax errors", ex);
+            throw Throwables.propagate(ex);
+        } catch (Exception ex) {
+            log(Level.SEVERE, "Failure loading 'crunchy.yml'", ex);
+            throw Throwables.propagate(ex);
+        }
+
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        verbose = getBoolean("verbose", true);
+        version = getInt("current-version", 1);
+        set("current-version", 1);
+
+        readConfig(CrunchyConfig.class, null);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(),
+                    "Crunchy", entry.getValue());
+        }
+    }
+
+    static void readConfig(@NotNull Class<?> clazz, @Nullable Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (Exception ex) {
+                        log(Level.SEVERE, "Failure invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(configFile);
+        } catch (Exception ex) {
+            log(Level.SEVERE, "Failure when saving 'crunchy.yml'", ex);
+        }
+    }
+
+    private static void set(String path, Object value) {
+        config.addDefault(path, value);
+        config.set(path, value);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static long getLong(String path, long def) {
+        config.addDefault(path, def);
+        return config.getLong(path, config.getLong(path));
+    }
+
+    protected static void log(String message) {
+        if (verbose) log(Level.INFO, message, null);
+    }
+
+    protected static void log(@NotNull Level level, @NotNull String message,
+                              @Nullable Throwable throwable) {
+        if (throwable != null)
+            Bukkit.getLogger().log(level, message, throwable);
+        else
+            Bukkit.getLogger().log(level, message);
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..514d7fa01bbb21910bc6ed28d093dc019288c189
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java
@@ -0,0 +1,70 @@
+package dev.mrfishcakes.crunchy.config;
+
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+import org.jetbrains.annotations.NotNull;
+
+import static dev.mrfishcakes.crunchy.config.CrunchyConfig.log;
+
+public final class CrunchyWorldConfig {
+
+    private final String levelName;
+    private final String defaultPath;
+    private final String namedPath;
+
+    public CrunchyWorldConfig(@NotNull String levelName) {
+        this.levelName = levelName;
+        this.defaultPath = "world-settings.default.";
+        this.namedPath = "world-settings." + levelName + ".";
+
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + levelName + "] --------");
+        CrunchyConfig.readConfig(CrunchyWorldConfig.class, this);
+    }
+
+    private void set(String path, Object value) {
+        CrunchyConfig.config.addDefault(defaultPath + path, value);
+        CrunchyConfig.config.set(defaultPath + path, value);
+
+        if (CrunchyConfig.config.get(namedPath + path) != null) {
+            CrunchyConfig.config.addDefault(namedPath + path, value);
+            CrunchyConfig.config.set(namedPath + path, value);
+        }
+    }
+
+    private ConfigurationSection getSection(String path) {
+        ConfigurationSection section = CrunchyConfig.config.getConfigurationSection(namedPath + path);
+
+        return section != null ? section : CrunchyConfig.config.getConfigurationSection(defaultPath + path);
+    }
+
+    private String getString(String path, String def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getString(namedPath + path, CrunchyConfig.config.getString(defaultPath + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getBoolean(namedPath + path, CrunchyConfig.config.getBoolean(defaultPath + path));
+    }
+
+    private int getInt(String path, int def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getInt(namedPath + path, CrunchyConfig.config.getInt(defaultPath + path));
+    }
+
+    private double getDouble(String path, double def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getDouble(namedPath + path, CrunchyConfig.config.getDouble(defaultPath + path));
+    }
+
+    private long getString(String path, long def) {
+        CrunchyConfig.config.addDefault(defaultPath + path, def);
+        return CrunchyConfig.config.getLong(namedPath + path, CrunchyConfig.config.getLong(defaultPath + path));
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 1b324839e37d510552f5f5497de009add69ecda5..a791e8dbc580becb6e1a26739d54d88b4c229251 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -225,6 +225,16 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper end
         com.tuinity.tuinity.config.TuinityConfig.init((java.io.File) options.valueOf("tuinity-settings")); // Tuinity - Server Config
 
+        // Crunchy start - Server config
+        try {
+            dev.mrfishcakes.crunchy.config.CrunchyConfig.init((java.io.File) options.valueOf("crunchy-settings"));
+        } catch (Exception ex) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", ex);
+            return false;
+        }
+        dev.mrfishcakes.crunchy.config.CrunchyConfig.registerCommands();
+        // Crunchy end - Server config
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 61a4dea715689b0ce9247040db5dd2080ee2e167..e2f679c8eff8b982664f867cdd32f3a3864ad26a 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -169,6 +169,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final com.tuinity.tuinity.config.TuinityConfig.WorldConfig tuinityConfig; // Tuinity - Server Config
 
+    public final dev.mrfishcakes.crunchy.config.CrunchyWorldConfig crunchyConfig; // Crunchy - Server config
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -316,6 +318,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
         this.tuinityConfig = new com.tuinity.tuinity.config.TuinityConfig.WorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData)worlddatamutable).getLevelName()); // Tuinity - Server Config
+        this.crunchyConfig = new dev.mrfishcakes.crunchy.config.CrunchyWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Crunchy - Server config
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, env);
         this.ticksPerAnimalSpawns = this.getCraftServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 765f0e3b2cf1eab41c029a29f83428d2053479ac..3a55a03b179eb7af6a85f5dbd894adc823e2c48b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -885,6 +885,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         com.tuinity.tuinity.config.TuinityConfig.init((File) console.options.valueOf("tuinity-settings")); // Tuinity - Server Config
+        dev.mrfishcakes.crunchy.config.CrunchyConfig.init((java.io.File) console.options.valueOf("crunchy-settings")); // Crunchy - Server config
         for (ServerLevel world : this.console.getAllLevels()) {
             world.serverLevelData.setDifficulty(config.difficulty);
             world.setSpawnSettings(config.spawnMonsters, config.spawnAnimals);
@@ -920,6 +921,7 @@ public final class CraftServer implements Server {
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
             world.tuinityConfig.init(); // Tuinity - Server Config
+            world.crunchyConfig.init(); // Crunchy - Server config
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2461,6 +2463,13 @@ public final class CraftServer implements Server {
         }
         // Tuinity end - add config to timings report
 
+        // Crunchy start - Server config
+        @Override
+        public YamlConfiguration getCrunchyConfig() {
+            return dev.mrfishcakes.crunchy.config.CrunchyConfig.config;
+        }
+        // Crunchy end - Server config
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index b153a8c9e7fdf5560148f02ba2f52c37ad3b5ace..6609ad960ce8cc029c668fbd56e56326f2abf5dd 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -154,6 +154,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Tuinity end - Server Config
 
+                // Crunchy start - Server config
+                acceptsAll(asList("crunchy", "crunchy-settings"), "File for crunchy settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("crunchy.yml"))
+                        .describedAs("Yml file");
+                // Crunchy end - Server config
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <finlayoxby@outlook.com>
Date: Fri, 3 Sep 2021 18:42:37 +0100
Subject: [PATCH] Crunchy Config


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 5e3b7fb2e0b7608610555cd23e7ad25a05883181..e39d2fcd9fd81d9439261ef08ddbdf5f5dc78bc1 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -227,7 +227,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
+            pair("crunchy", mapAsJSON(Bukkit.spigot().getCrunchyConfig(), null)) // Crunchy
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/dev/mrfishcakes/crunchy/commands/CrunchyCommand.java b/src/main/java/dev/mrfishcakes/crunchy/commands/CrunchyCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..30e6da894a7d861538cee9816e20bbea747efe51
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/commands/CrunchyCommand.java
@@ -0,0 +1,87 @@
+package dev.mrfishcakes.crunchy.commands;
+
+import dev.mrfishcakes.crunchy.CrunchyUtil;
+import dev.mrfishcakes.crunchy.config.CrunchyConfig;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+/**
+ * Class to manage the basic <i>/crunchy</i> command
+ *
+ * @author MrFishCakes
+ */
+public class CrunchyCommand extends Command {
+
+    public CrunchyCommand() {
+        super("crunchy");
+        this.description = "Crunchy related commands";
+        this.usageMessage = "/crunchy [reload | version]";
+        this.setPermission("bukkit.command.crunchy");
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            CrunchyUtil.sendMessage(sender, ChatColor.RED + "Usage: " + usageMessage);
+            return true;
+        }
+
+        switch (args[0].toLowerCase()) {
+            case "reload":
+            case "rl":
+                reloadCrunchy(sender);
+                break;
+            case "ver":
+            case "version":
+                Command versionCommand = MinecraftServer.getServer().server.getCommandMap().getCommand("version");
+                if (versionCommand != null) {
+                    versionCommand.execute(sender, commandLabel, new String[0]);
+                    break;
+                }
+            default:
+                CrunchyUtil.sendMessage(sender, ChatColor.RED + "Usage: " + usageMessage);
+                return false;
+        }
+
+        return true;
+    }
+
+    @Override
+    @NotNull
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version").filter(arg -> arg.startsWith(args[0].toLowerCase())).collect(Collectors.toList());
+        }
+
+        return Collections.emptyList();
+    }
+
+    private void reloadCrunchy(CommandSender sender) {
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "Please not this command is not supported and may cause issues.");
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+        MinecraftServer console = MinecraftServer.getServer();
+
+        CrunchyConfig.init((File) console.options.valueOf("crunchy-settings"));
+        for (ServerLevel level : console.getAllLevels()) {
+            level.crunchyConfig.init();
+        }
+
+        console.server.reloadCount++;
+
+        Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Crunchy config reload complete.");
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..822933f7d0aa5c358256fb13357ed21fa4b1cbdd
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
@@ -0,0 +1,162 @@
+package dev.mrfishcakes.crunchy.config;
+
+import dev.mrfishcakes.crunchy.commands.CrunchyCommand;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+/**
+ * Class to manage all global options relating to Crunchy
+ *
+ * @author MrFishCakes
+ */
+public final class CrunchyConfig {
+
+    private static final String HEADER = """
+            Configuration file for Crunchy.
+                        
+            More options will be added to this file over time, but to ensure that each
+            setting is correctly configured, refer to the wiki page before changing anything.
+                        
+            This can be found at: https://github.com/MrFishCakes/Crunchy
+                        
+            Thank you for using Crunchy! :)
+            """;
+    private static File configFile;
+    private static Map<String, Command> commands;
+
+    public static YamlConfiguration config;
+
+    static int version = 2;
+    static boolean verbose = false; // Debug logging
+
+    public static boolean verbose() {
+        return verbose;
+    }
+
+    public static void init(@NotNull File file) {
+        if (file == null) {
+            throw new IllegalArgumentException("File parameter cannot be null");
+        }
+
+        configFile = file;
+        commands = new HashMap<>();
+
+        commands.put("crunchy", new CrunchyCommand());
+
+        if (!configFile.exists()) {
+            try {
+                configFile.createNewFile();
+            } catch (Exception ex) {
+                log(Level.SEVERE, String.format("Unable to create '%s' file", configFile.getName()), ex);
+            }
+        }
+
+        config = new YamlConfiguration();
+
+        try {
+            config.load(configFile);
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, String.format("Unable to load '%s' due to syntax errors", configFile.getName()), ex);
+
+            throw new RuntimeException(ex);
+        } catch (Exception ex) {
+            Bukkit.getLogger().log(Level.SEVERE, String.format("Unable to load '%s'", configFile.getName()), ex);
+
+            throw new RuntimeException(ex);
+        }
+
+        config.options().copyDefaults(true);
+        config.options().header(HEADER);
+
+        verbose = getBoolean("verbose", false);
+        version = getInt("version", 2);
+        set("version", 2);
+
+        readConfig(CrunchyConfig.class, null);
+    }
+
+    public static void registerCommands() {
+        commands.forEach((key, value) -> MinecraftServer.getServer().server.getCommandMap().register(key, "Crunchy", value));
+    }
+
+    static void readConfig(@NotNull Class<?> clazz, @Nullable Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (Exception ex) {
+                        log(Level.SEVERE, String.format("Unable to invoke method ('%s')", method.getName()), ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(configFile);
+        } catch (Exception ex) {
+            log(Level.SEVERE, String.format("Unable to save '%s'", configFile.getName()), ex);
+        }
+    }
+
+    static void log(@NotNull Level level, @NotNull String message, @Nullable Throwable throwable) {
+        if (throwable != null)
+            Bukkit.getLogger().log(level, message, throwable);
+        else
+            Bukkit.getLogger().log(level, message);
+    }
+
+    static void log(@NotNull Level level, @NotNull String message) {
+        log(level, message, null);
+    }
+
+    private static void set(String path, Object value) {
+        config.addDefault(path, value);
+        config.set(path, value);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static long getLong(String path, long def) {
+        config.addDefault(path, def);
+        return config.getLong(path, config.getLong(path));
+    }
+
+    private static List<?> getList(String path, List<?> def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..d79711985c4a92ce2ffc6e38c992b4f96d3fc03c
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyWorldConfig.java
@@ -0,0 +1,84 @@
+package dev.mrfishcakes.crunchy.config;
+
+import org.bukkit.configuration.ConfigurationSection;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+import java.util.logging.Level;
+
+import static dev.mrfishcakes.crunchy.config.CrunchyConfig.config;
+
+/**
+ * Class to manage all per-world options relating to Crunchy
+ *
+ * @author MrFishCakes
+ */
+public final class CrunchyWorldConfig {
+
+    private final String levelName;
+    private final String defaultPath;
+    private final String namedPath;
+
+    public CrunchyWorldConfig(@NotNull String levelName) {
+        this.levelName = levelName;
+        this.defaultPath = "world-settings.default.";
+        this.namedPath = "world-settings." + levelName + ".";
+
+        init();
+    }
+
+    public void init() {
+        if (CrunchyConfig.verbose()) {
+            CrunchyConfig.log(Level.INFO, String.format("-------- World Settings For [%s] --------", levelName));
+        }
+
+        CrunchyConfig.readConfig(CrunchyWorldConfig.class, this);
+    }
+
+    private void set(String path, Object value) {
+        config.addDefault(defaultPath + path, value);
+        config.set(defaultPath + path, value);
+
+        if (config.get(namedPath + path) != null) {
+            config.addDefault(namedPath + path, value);
+            config.set(namedPath + path, value);
+        }
+    }
+
+    private ConfigurationSection getSection(String path) {
+        ConfigurationSection section = config.getConfigurationSection(namedPath + path);
+
+        return section != null ? section : config.getConfigurationSection(defaultPath + path);
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault(defaultPath + path, def);
+        return config.getString(namedPath + path, config.getString(defaultPath + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault(defaultPath + path, def);
+        return config.getBoolean(namedPath + path, config.getBoolean(defaultPath + path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault(defaultPath + path, def);
+        return config.getInt(namedPath + path, config.getInt(defaultPath + path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault(defaultPath + path, def);
+        return config.getDouble(namedPath + path, config.getDouble(defaultPath + path));
+    }
+
+    private long getLong(String path, long def) {
+        config.addDefault(defaultPath + path, def);
+        return config.getLong(namedPath + path, config.getLong(defaultPath + path));
+    }
+
+    private List<?> getList(String path, List<?> def) {
+        config.addDefault(defaultPath + path, def);
+        return config.getList(namedPath + path, config.getList(defaultPath + path));
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 38a0fb9a7c4ade9cacfd30dffabfea7e6b773981..04e4031d52d9b2cd9c36bfa96f340a00cdffde03 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -233,6 +233,16 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
 
+        // Crunchy start
+        try {
+            dev.mrfishcakes.crunchy.config.CrunchyConfig.init((java.io.File) options.valueOf("crunchy-settings"));
+        } catch (Exception ex) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", ex);
+            return false;
+        }
+        dev.mrfishcakes.crunchy.config.CrunchyConfig.registerCommands();
+        // Crunchy end
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index c2220d5157d3065a256cd17410760c6aedf24987..68be94782ac8568281240718c503cd4c8806fed0 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -177,6 +177,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
     public java.util.ArrayDeque<net.minecraft.world.level.block.RedstoneTorchBlock.Toggle> redstoneUpdateInfos; // Paper - Move from Map in BlockRedstoneTorch to here
 
+    public final dev.mrfishcakes.crunchy.config.CrunchyWorldConfig crunchyConfig; // Crunchy
+
     // Paper start - fix and optimise world upgrading
     // copied from below
     public static ResourceKey<DimensionType> getDimensionKey(DimensionType manager) {
@@ -311,6 +313,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, final DimensionType dimensionmanager, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.concurrent.Executor executor) { // Paper - Async-Anti-Xray - Pass executor
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
+        this.crunchyConfig = new dev.mrfishcakes.crunchy.config.CrunchyWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Crunchy
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
         this.ticksPerAnimalSpawns = this.getCraftServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 240844e72051d76a2dc5c38ab75e03e94035316d..d7fca4eb14a8046d807ba743bd6b5a8ddfb3805d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -933,6 +933,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        dev.mrfishcakes.crunchy.config.CrunchyConfig.init((File) console.options.valueOf("crunchy-settings")); // Crunchy
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -973,6 +974,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
+            world.crunchyConfig.init(); // Crunchy
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -988,6 +990,7 @@ public final class CraftServer implements Server {
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
+        dev.mrfishcakes.crunchy.config.CrunchyConfig.registerCommands(); // Crunchy
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2550,6 +2553,13 @@ public final class CraftServer implements Server {
             return com.destroystokyo.paper.PaperConfig.config;
         }
 
+        // Crunchy start
+        @Override
+        public YamlConfiguration getCrunchyConfig() {
+            return dev.mrfishcakes.crunchy.config.CrunchyConfig.config;
+        }
+        // Crunchy end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 450518903c0a10301b177d8dd7fe05aca3b8b37e..fe332eac8d2c36262af908285d697d8b7f6a533e 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -153,6 +153,14 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // Crunchy Start
+                acceptsAll(asList("crunchy", "crunchy-settings"), "File for crunchy settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("crunchy.yml"))
+                        .describedAs("Yml file");
+                // Crunchy end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <finlayoxby@outlook.com>
Date: Tue, 31 Aug 2021 21:13:11 +0100
Subject: [PATCH] Add Ping Command


diff --git a/src/main/java/dev/mrfishcakes/crunchy/commands/PingCommand.java b/src/main/java/dev/mrfishcakes/crunchy/commands/PingCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..24d33422dc082841b368f26d13f917b4d06964ea
--- /dev/null
+++ b/src/main/java/dev/mrfishcakes/crunchy/commands/PingCommand.java
@@ -0,0 +1,87 @@
+package dev.mrfishcakes.crunchy.commands;
+
+import dev.mrfishcakes.crunchy.config.CrunchyConfig;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.util.StringUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.*;
+
+public class PingCommand extends Command {
+
+    private static final String BASE_PERMISSION = "bukkit.command.ping";
+    private static final String OTHER_PERMISSION = BASE_PERMISSION + ".other";
+
+    private final MiniMessage message;
+
+    public PingCommand() {
+        super("ping", "Check the ping of a player", "/<command> [Player]", Collections.emptyList());
+        setPermission(BASE_PERMISSION);
+
+        this.message = MiniMessage.get();
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String label, @NotNull String[] args) {
+        if (!testPermission(sender)) return true;
+
+        final Map<String, String> placeholders = new HashMap<>();
+
+        if (args.length == 1) {
+            if (sender instanceof Player player && !args[0].equalsIgnoreCase(player.getName()) && !player.hasPermission(OTHER_PERMISSION)) {
+                return true;
+            }
+
+            placeholders.put("playerName", args[0]);
+
+            Player result = getPlayer(args[0]);
+            if (result == null) {
+                sender.sendMessage(message.parse(CrunchyConfig.invalidPlayer, placeholders));
+                return true;
+            }
+
+            placeholders.replace("playerName", result.getName());
+            placeholders.put("playerPing", String.valueOf(result.getPing()));
+
+            sender.sendMessage(message.parse(CrunchyConfig.pingCommandOutputOther, placeholders));
+            return true;
+        } else {
+            final int ping = sender instanceof Player player ? player.getPing() : 0;
+
+            placeholders.put("playerPing", String.valueOf(ping));
+
+            sender.sendMessage(message.parse(CrunchyConfig.pingCommandOutputSelf, placeholders));
+            return true;
+        }
+    }
+
+    @Override
+    @NotNull
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+        if (args.length == 1 && sender.hasPermission(OTHER_PERMISSION)) {
+            Set<String> names = new HashSet<>();
+
+            Bukkit.getOnlinePlayers().forEach(player -> names.add(player.getName()));
+
+            return StringUtil.copyPartialMatches(args[0], names, new ArrayList<>());
+        }
+
+        return Collections.emptyList();
+    }
+
+    @Nullable
+    private Player getPlayer(@NotNull String arg) {
+        try {
+            Player result = Bukkit.getPlayer(UUID.fromString(arg));
+
+            return result != null ? result : Bukkit.getPlayer(arg);
+        } catch (IllegalArgumentException ex) {
+            return Bukkit.getPlayer(arg);
+        }
+    }
+}
diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
index 094a3272d4d0849563f53d723c4f668f344738d8..14208675b99fbe68d1af2c0519c4ae623d88f8b6 100644
--- a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
@@ -1,6 +1,7 @@
 package dev.mrfishcakes.crunchy.config;
 
 import com.google.common.base.Throwables;
+import dev.mrfishcakes.crunchy.commands.PingCommand;
 import dev.mrfishcakes.crunchy.commands.UptimeCommand;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
@@ -68,6 +69,7 @@ public final class CrunchyConfig {
         version = getInt("current-version", 1);
         set("current-version", 1);
 
+        commands.put("ping", new PingCommand());
         commands.put("uptime", new UptimeCommand());
 
         readConfig(CrunchyConfig.class, null);
@@ -108,7 +110,7 @@ public final class CrunchyConfig {
 
     private static String getString(String path, String def) {
         config.addDefault(path, def);
-        return config.getString(path, config.getString(path));
+        return config.getString(path, config.getString(path)).replaceAll("''", "\"");
     }
 
     private static boolean getBoolean(String path, boolean def) {
@@ -143,6 +145,22 @@ public final class CrunchyConfig {
             Bukkit.getLogger().log(level, message);
     }
 
+    // Command defaults
+    public static String invalidPlayer;
+
+    private static void defaultCommandSettings() {
+        invalidPlayer = getString("commands.default.invalid-player", "<red>Unable to match: ''<playerName>''");
+    }
+
+    // Ping command
+    public static String pingCommandOutputOther;
+    public static String pingCommandOutputSelf;
+
+    private static void pingCommandSettings() {
+        pingCommandOutputOther = getString("commands.ping.output-other", "<green><playerName>''s <white>ping is: <green><playerPing>");
+        pingCommandOutputSelf = getString("commands.ping.output-self", "<white>Your ping is: <green><playerPing>");
+    }
+
     // Uptime command
     public static String uptimeCommandOutput;
     public static String uptimeCommandTimezone;

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <finlayoxby@outlook.com>
Date: Sat, 11 Sep 2021 18:22:24 +0100
Subject: [PATCH] Enhanced Mending


diff --git a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
index 822933f7d0aa5c358256fb13357ed21fa4b1cbdd..7428b3add87ead3a3a30c8decfedeb64ff377acc 100644
--- a/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
+++ b/src/main/java/dev/mrfishcakes/crunchy/config/CrunchyConfig.java
@@ -159,4 +159,11 @@ public final class CrunchyConfig {
         return config.getList(path, config.getList(path));
     }
 
+    // Enchantment Settings
+    public static boolean enhancedMending;
+
+    private static void enchantmentSettings() {
+        enhancedMending = getBoolean("enchantments.enhanced-mending", true);
+    }
+
 }
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index 8be7a3527018f9f6ecb91576c928c255b3089342..42f8f28c03f3f55e00218a9213827798cf071ed7 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -319,7 +319,7 @@ public class ExperienceOrb extends Entity {
     }
 
     private int repairPlayerItems(Player player, int amount) {
-        Entry<EquipmentSlot, ItemStack> entry = EnchantmentHelper.getRandomItemWith(Enchantments.MENDING, player, ItemStack::isDamaged);
+        Entry<EquipmentSlot, ItemStack> entry = dev.mrfishcakes.crunchy.config.CrunchyConfig.enhancedMending ? EnchantmentHelper.getMostDamagedItem(Enchantments.MENDING, player) : EnchantmentHelper.getRandomItemWith(Enchantments.MENDING, player, ItemStack::isDamaged); // Crunchy - Enhanced mending
 
         if (entry != null) {
             ItemStack itemstack = (ItemStack) entry.getValue();
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 66f808cabcf6a9a6584849b285f1c60133adc7b4..5bd978ad60d9b12f289aa179a572b4dd04645e99 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -1306,6 +1306,16 @@ public final class ItemStack {
         return this.getItem().getEquipSound();
     }
 
+    // Crunchy start - Enhanced mending
+    public float getDamagePercent() {
+        if (this.isDamaged()) {
+            return (float) this.getDamageValue() / (float) this.getItem().getMaxDamage();
+        }
+
+        return 0F;
+    }
+    // Crunchy end - Enhanced mending
+
     public static enum TooltipPart {
 
         ENCHANTMENTS, MODIFIERS, UNBREAKABLE, CAN_DESTROY, CAN_PLACE, ADDITIONAL, DYE;
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
index 3a09ce6d0ea51436adcae4719d3f28d1868c283c..d24e45480260b04650172be71783e12b2f1f21d0 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -405,6 +405,29 @@ public class EnchantmentHelper {
         return list;
     }
 
+    // Crunchy start - Enhanced mending
+    public static Entry<EquipmentSlot, ItemStack> getMostDamagedItem(Enchantment enchantment, LivingEntity entity) {
+        Map<EquipmentSlot, ItemStack> map = enchantment.getSlotItems(entity);
+        if (map.isEmpty()) return null;
+
+        Entry<EquipmentSlot, ItemStack> item = null;
+        float max = 0F;
+
+        for (Entry<EquipmentSlot, ItemStack> entry : map.entrySet()) {
+            ItemStack itemStack = entry.getValue();
+            if (!itemStack.isEmpty() && itemStack.isDamaged() && getItemEnchantmentLevel(enchantment, itemStack) > 0) {
+                float percent = itemStack.getDamagePercent();
+                if (item == null || percent > max) {
+                    item = entry;
+                    max = percent;
+                }
+            }
+        }
+
+        return item;
+    }
+    // Crunchy end - Enhanced mending
+
     @FunctionalInterface
     interface EnchantmentVisitor {
         void accept(Enchantment enchantment, int level);
